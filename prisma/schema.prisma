// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model AcademicSemester{
  id String @id @default(uuid())
  year String
  title String
  code Int
  startDate String
  endDate String
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt()

  @@map("academic_semester")
  students Student[]
  SemesterRegistration SemesterRegistration[]
}

model AcademicFaculty{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("academic_faculty")
  academicDepartments AcademicDepartment[]
  students Student[]
  faculties Faculty[]
}

model AcademicDepartment{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  @@map("academic_department")
  students Student[]
  faculties Faculty[]
  offeredCourses OfferedCourse[]
}

model Student{
  id String @id @default(uuid())
  firstName String
  lastName String
  middleName String?
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroups String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
 
  @@map("student")
}

model Faculty{
  id String @id @default(uuid())
  firstName String
  lastName String
  middleName String?
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroup String
  designation String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String 
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  @@map("faculty")
  courseFaculties CourseFaculty[]
}

model Building {
  id String @id @default(uuid())
  title String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  Room Room[]
}

model Room{
  id String @id @default(uuid())
  roomNumber String
  floor String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  buildingId String
  building Building @relation(fields: [buildingId], references: [id])
}

model Course{
  id String @id @default(uuid())
  title String
  code String
  credits Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("courses")
  prerequisite CourseToPrerequisite[] @relation(name: "CourseToPrerequisite")
  prerequisiteFor CourseToPrerequisite[] @relation(name: "PrerequisiteToCourse")
  courseFaculties CourseFaculty[]
  offeredCourses OfferedCourse[]
}

model CourseToPrerequisite{
  courseId String
  prerequisiteId String

  course Course @relation(fields: [courseId], references: [id],name:"CourseToPrerequisite")
  prerequisite Course @relation(fields: [prerequisiteId], references: [id],name:"PrerequisiteToCourse")

  @@id([courseId, prerequisiteId])
}

model CourseFaculty {
  courseId String 
  course Course @relation(fields: [courseId], references: [id])
  facultyId String
  faculty Faculty @relation(fields: [facultyId], references: [id])
  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  status SemesterRegistrationStatus? @default(UPCOMING)
  minCredit Int @default(0)
  maxCredit Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  offeredCourses OfferedCourse[]
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourse {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id]) 
}